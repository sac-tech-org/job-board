openapi: 3.0.3

info:
  title: Sac Tech Job Board API
  version: 0.1.0
  description: OpenAPI specification for the Sac Tech Job Board API.
  contact:
    name: Robert Usher
    url: https://github.com/sac-tech-org/job-board
    email: robert@procyoninnovations.com

servers:
  - url: http://localhost:8080
    description: Local server

tags:
  - name: Health Check
  - name: Job
  - name: Organization
  - name: User

paths:
  /health:
    get:
      description: Health check endpoint
      responses:
        "200":
          description: "Service is healthy"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheck"
      tags:
        - Health Check

  /job:
    post:
      operationId: postJob
      description: Create a new job
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobPost"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobResource"
          description: "Job created"
          links:
            GetJobByID:
              operationId: getJobByID
              parameters:
                id: "$response.body#/id"
              description: The `id` value in the response is the `job_id` parameter in `GET /job/{job_id}`

      tags:
        - Job

  /job/{job_id}:
    parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getJobByID
      description: Get job by ID
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobResource"
          description: GET Job object response
      tags:
        - Job
    put:
      operationId: putJobByID
      description: Update job by ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobPost"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobResource"
          description: PUT Job object response
      tags:
        - Job

  /job/{job_id}/posting:
    parameters:
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getJobPosting
      description: Get job posting by ID
      parameters:
        - $ref: "#/components/parameters/pageSizeQuery"
        - $ref: "#/components/parameters/pageTokenQuery"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/JobPostingResourceList"
          description: GET Job posting response
      tags:
        - Job
    post:
      operationId: postJobPosting
      description: Create a new job posting
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobPostingPost"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobPostingResource"
          description: "Job posting created"
          links:
            GetJobPostingByID:
              operationId: getJobPostingByID
              parameters:
                id: "$response.body#/id"
              description: The `id` value in the response is the `posting_id` parameter in `GET /job/{job_id}/posting/{posting_id}`
      tags:
        - Job
    put:
      operationId: putJobPostingByID
      description: Update job posting by ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobPostingPost"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobPostingResource"
          description: PUT Job posting object response
      tags:
        - Job

  /job/posting:
    get:
      operationId: getJobPostingList
      description: Get list of job postings
      parameters:
        - $ref: "#/components/parameters/pageSizeQuery"
        - $ref: "#/components/parameters/pageTokenQuery"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/JobPostingResourceList"
          description: GET Job posting list response
      tags:
        - Job

  /organization:
    post:
      operationId: postOrganization
      description: Create a new organization
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationPost"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationResource"
          description: "Organization created"
          links:
            GetOrgByID:
              operationId: getOrganizationByID
              parameters:
                id: "$response.body#/id"
              description: The `id` value in the response is the `org_id` parameter in `GET /organization/{org_id}`

      tags:
        - Organization

  /organization/{org_id}:
    parameters:
      - name: org_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getOrganizationByID
      description: Get organization by ID
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationResource"
          description: GET Organization object response
      tags:
        - Organization
    put:
      operationId: putOrganizationByID
      description: Update organization by ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationPost"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationResource"
          description: PUT Organization object response
      tags:
        - Organization

  /organization/jobs:
    get:
      operationId: getOrganizationJobList
      description: Get list of jobs for an organization
      parameters:
        - $ref: "#/components/parameters/pageSizeQuery"
        - $ref: "#/components/parameters/pageTokenQuery"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/JobResourceList"
          description: GET Job list response
      tags:
        - Organization

  /user:
    get:
      operationId: getUserList
      description: Get list of users
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResource"
          description: GET User list response
      tags:
        - User

  /user/me:
    get:
      operationId: getCurrentUser
      description: Get current user
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResource"
          description: GET User object response
      tags:
        - User

  /user/{username}:
    parameters:
      - $ref: "#/components/parameters/usernamePath"
    delete:
      operationId: deleteUserByID
      description: Delete user by ID
      responses:
        "204":
          description: "User succussfully deleted"
      tags:
        - User
    get:
      operationId: getUserByUsername
      description: Get user by Username
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResource"
          description: GET User object response
      tags:
        - User
    put:
      operationId: putUserByID
      description: Update user by ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdatePut"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResource"
          description: PUT User object response
      tags:
        - User

components:
  parameters:
    pageSizeQuery:
      in: query
      name: Page Size
      required: true
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
    pageTokenQuery:
      in: query
      name: Page Token
      required: false
      schema:
        type: string
    usernamePath:
      description: Username
      in: path
      name: username
      required: true
      schema:
        type: string

  schemas:
    EmailObject:
      type: object
      properties:
        address:
          type: string
          format: email
        verified:
          type: boolean
    HealthCheck:
      type: object
      properties:
        status:
          type: string
          enum:
            - ok
    JobResource:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        organization:
          type: string
          format: uuid
    JobResourceList:
      allOf:
        - $ref: "#/components/schemas/PaginationResponse"
        - type: object
          properties:
            jobs:
              type: array
              items:
                $ref: "#/components/schemas/JobResource"
    JobPost:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
    JobPostingPost:
      type: object
      properties:
        employmentType:
          type: string
          enum:
            - full-time
            - part-time
            - contract
            - temporary
            - internship
            - volunteer
            - per-diem
            - other
        payRate:
          type: number
          format: float
        payType:
          type: string
          enum:
            - hourly
            - salary
            - commission
            - other
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        publishOverride:
          type: boolean
    JobPostingResource:
      type: object
      properties:
        employmentType:
          type: string
          enum:
            - full-time
            - part-time
            - contract
            - temporary
            - internship
            - volunteer
            - per-diem
            - other
        payRate:
          type: number
          format: float
        payType:
          type: string
          enum:
            - hourly
            - salary
            - commission
            - other
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        publishOverride:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    JobPostingResourceList:
      allOf:
        - $ref: "#/components/schemas/PaginationResponse"
        - type: object
          properties:
            postings:
              type: array
              items:
                $ref: "#/components/schemas/JobPostingResource"
    OrganizationResource:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        website:
          type: string
          format: uri
    OrganizationPost:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        website:
          type: string
          format: uri
    PaginationResponse:
      type: object
      properties:
        nextPageToken:
          type: string
    UserResource:
      type: object
      properties:
        email:
          $ref: "#/components/schemas/EmailObject"
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
          maxLength: 24
    UserUpdatePut:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
          maxLength: 24
